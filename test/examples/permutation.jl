#= permutation representations of various small groups =#

### symmetric groups
N = 7
@testset "symmetric groups S‚Çô for 3 ‚â§ n ‚â§ $N" begin
    for n = 3:N
        @testset "symmetric group S‚Çô‚ÅΩ¬π‚Åæ for n = $n" begin
            # presentation taken from Coxeter Graph A‚Çô in https://agag-lassueur.math.rptu.de/~lassueur/en/teaching/ProSemSS22/Coxeter_WS1920.pdf
            A, X = free_associative_algebra(QQ, n - 1, "x")
            inv = [X[i]^2- 1 for i = 1:n-1]
            rel = []
            for i in 1:(n-2)
                push!(rel, (X[i] * X[i+1])^3 -1)
                for j in (i+2):(n-1)
                    push!(rel, (X[i] * X[j])^2 -1)
                end
            end

            relations = Vector{elem_type(A)}(vcat(inv, rel))

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(SparseMatrixCSC, A, relations)

            verify(relations, matrices)

            # test dimension, i.e. order of group
            @test dimension == factorial(n)  # |S‚Çô| = n!
        end

        @testset "symmetric group S‚Çô‚ÅΩ¬≤‚Åæ for n = $n" begin
            # presentation from https://math.stackexchange.com/questions/3972026/what-are-the-relations-in-this-presentation-of-s-n
            #‚ü®t, c | t¬≤ = c‚Åø = (tc)‚Åø‚Åª¬π = [t,c]¬≥ = 1; [t,c·µè]¬≤ = 1 for 2 ‚â§ k ‚â§ n√∑2‚ü©
            A, X = free_associative_algebra(QQ, 3, "x")
            t = X[1]
            c = X[2]
            c‚Åª¬π = X[3]
            inv = [t^2 - 1, c*c‚Åª¬π - 1, c‚Åª¬π*c - 1]
            rel = [c^n - 1, (t * c)^(n - 1) - 1, (t * c‚Åª¬π * t * c)^3 - 1]
            for k in 2:n√∑2
                push!(rel, (t * c‚Åª¬π^k * t * c^k)^2 - 1)
            end

            relations = Vector{elem_type(A)}(vcat(inv, rel))

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(SparseMatrixCSC, A, relations)

            verify(relations, matrices)

            # test dimension, i.e. order of group
            @test dimension == factorial(n)  # |S‚Çô| = n!
        end
    end
end


### alternating groups
N = 8
@testset "alternating groups A‚Çô for 3 ‚â§ n ‚â§ $N" begin
    for n = 3:N
        @testset "alternating group A‚Çô for n = $n" begin
            # presentation from https://math.stackexchange.com/questions/152158/presentation-of-a-n-from-jacobsons-basic-algebra-i
            A, X = free_associative_algebra(QQ, (n - 1), "x")
            inv = [X[1]*X[n-1] - 1, X[n-1]*X[1] - 1]
            rel = [X[1]^3 - 1]
            for i in 1:(n-3)
                push!(inv, X[i+1]^2 - 1)
                push!(rel, (X[i] * X[i+1])^3 - 1)
                for j in (i+2):(n-2)
                    push!(rel, (X[i] * X[j])^2 - 1)
                end
            end

            relations = Vector{elem_type(A)}(vcat(inv, rel))

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(SparseMatrixCSC, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension, i.e. order of group
            @test dimension == factorial(n) √∑ 2  # |A‚Çô| = n!/2
        end
    end
end


# dihedral groups
N = 10
@testset "dihedral groups D‚ÇÇ‚Çô for 2 ‚â§ n ‚â§ $N" begin
    for n =2:N 
        @testset "dihedral group D‚ÇÇ‚Çô‚ÅΩ¬π‚Åæ for n = $n" begin
            # ‚ü® a,b | a^n, b^2, (a*b)^2 ‚ü© = D‚ÇÇ‚Çô
            A, X = free_associative_algebra(QQ, 3, "x")
            a = X[1]
            b = X[3]
            inv = [X[1]*X[2]-1, X[2]*X[1]-1, b^2-1]
            rel = [a^n - 1, (a * b)^2 - 1]

            relations = Vector{elem_type(A)}(vcat(inv, rel))

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(SparseMatrixCSC, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension, i.e. order of group
            @test dimension == 2 * n  # |D‚ÇÇ‚Çô| = 2n
        end

        @testset "dihedral group D‚ÇÇ‚Çô‚ÅΩ¬≤‚Åæ for n = $n" begin
            # ‚ü® a,b | a^2, b^2, (a*b)^n ‚ü© = D‚ÇÇ‚Çô
            A, X = free_associative_algebra(QQ, 2, "x")
            a = X[1]
            b = X[2]
            inv = [a^2 - 1, b^2 - 1]
            rel = [(a * b)^n - 1]

            relations = Vector{elem_type(A)}(vcat(inv, rel))

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(SparseMatrixCSC, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension, i.e. order of group
            @test dimension == 2 * n  # |D‚ÇÇ‚Çô| = 2n
        end
    end
end
 

### some of the presentations used to compare different implementations of coset enumeration in 
# Cannon, John J., Lucien A. Dimino, George Havas, and Jane M. Watson. 
# ‚ÄúImplementation and Analysis of the Todd-Coxeter Algorithm.‚Äù 
# Mathematics of Computation 27, no. 123 (1973): 463‚Äì90. 
# https://doi.org/10.2307/2005654.
ùîΩ‚ÇÇ = QQ # TODO change to F‚ÇÇ #?

@testset "E‚ÇÅ" begin
    A, (s, t, r, s‚Ä≤, t‚Ä≤, r‚Ä≤) = free_associative_algebra(ùîΩ‚ÇÇ, ["s", "t", "r", "s'", "t'", "r'"])
    inv = [s*s‚Ä≤ - 1, t*t‚Ä≤ - 1, r*r‚Ä≤ - 1, s‚Ä≤*s - 1, t‚Ä≤*t - 1, r‚Ä≤*r - 1]
    rel = [t‚Ä≤ * r * t * r‚Ä≤^2 - 1, r‚Ä≤ * s * r * s‚Ä≤^2 - 1, s‚Ä≤ * t * s * t‚Ä≤^2 - 1]

    relations = Vector{elem_type(A)}(vcat(inv, rel))

    dimension = dimension_qa(A, relations)

    matrices = matrices_qa(SparseMatrixCSC, A, relations)

    # verify the relations are satisfied for low dimensions
    verify(relations, matrices)

    # test dimension, i.e. order of group
    @test dimension == 1
end

@testset "Cox" begin
    A, (a, b, a‚Ä≤, b‚Ä≤) = free_associative_algebra(ùîΩ‚ÇÇ, ["a", "b", "a'", "b'"])
    inv = [a*a‚Ä≤ - 1, b*b‚Ä≤ - 1, a‚Ä≤*a - 1, b‚Ä≤*b - 1]
    rel = [a^6 - 1, b^6 - 1, (a * b)^2 - 1, (a^2 * b^2)^2 - 1, (a^3 * b^3)^5 - 1]

    relations = Vector{elem_type(A)}(vcat(inv, rel))

    dimension = dimension_qa(A, relations)

    matrices = matrices_qa(SparseMatrixCSC, A, relations)

    # verify the relations are satisfied for low dimensions
    #verify(relations, matrices)

    # test dimension, i.e. order of group
    @test dimension == 3000
end

@testset "B‚ÇÇ,‚ÇÑ" begin
    A, (a, b, a‚Ä≤, b‚Ä≤) = free_associative_algebra(ùîΩ‚ÇÇ, ["a", "b", "a'", "b'"])
    inv = [a*a‚Ä≤ - 1, b*b‚Ä≤ - 1, a‚Ä≤*a - 1, b‚Ä≤*b - 1]
    rel = [a^4 - 1, b^4 - 1, (a * b)^4 - 1, (a‚Ä≤ * b)^4 - 1, (a^2 * b)^4 - 1, (a * b^2)^4 - 1, (a^2 * b^2)^4 - 1, (a‚Ä≤ * b * a * b)^4 - 1, (a * b‚Ä≤ * a * b)^4 - 1]

    relations = Vector{elem_type(A)}(vcat(inv, rel))

    dimension = dimension_qa(A, relations)

    matrices = matrices_qa(SparseMatrixCSC, A, relations)

    # verify the relations are satisfied for low dimensions
    #verify(relations, matrices)

    # test dimension, i.e. order of group
    @test dimension == 4096
end

@testset "S‚Çá" begin
    A, (a, b, a‚Ä≤, b‚Ä≤) = free_associative_algebra(ùîΩ‚ÇÇ, ["a", "b", "a'", "b'"])
    inv = [a*a‚Ä≤ - 1, b*b‚Ä≤ - 1, a‚Ä≤*a - 1, b‚Ä≤*b - 1]
    rel = [a^7 - 1, b^2 - 1, (a * b)^6 - 1, (a * b * a‚Ä≤ * b‚Ä≤)^3 - 1, (a * a * b * a‚Ä≤ * a‚Ä≤ * b‚Ä≤)^2 - 1, (a * a * a * b * a‚Ä≤ * a‚Ä≤ * a‚Ä≤ * b‚Ä≤)^2 - 1]

    relations = Vector{elem_type(A)}(vcat(inv, rel))

    dimension = dimension_qa(A, relations)

    matrices = matrices_qa(SparseMatrixCSC, A, relations)

    # verify the relations are satisfied for low dimensions
    verify(relations, matrices)

    # test dimension, i.e. order of group
    @test dimension == 5040
end


@testset "PSL‚ÇÇ(11)" begin
    A, (a, b, a‚Ä≤) = free_associative_algebra(ùîΩ‚ÇÇ, ["a", "b", "a'"])
    inv = [a*a‚Ä≤ - 1, a‚Ä≤*a - 1, b^2 - 1]
    rel = [a^11-1, (a * b)^3-1, (a^4 * b * a‚Ä≤^5 * b)^2-1]

    relations = Vector{elem_type(A)}(vcat(inv, rel))

    dimension = dimension_qa(A, relations)

    matrices = matrices_qa(SparseMatrixCSC, A, relations)

    # verify the relations are satisfied for low dimensions
    #verify(relations, matrices)

    # test dimension, i.e. order of group
    @test dimension == 660
end

@testset "PSL‚ÇÇ(17)" begin
    A, (a, b, a‚Ä≤) = free_associative_algebra(ùîΩ‚ÇÇ, ["a", "b", "a'"])
    inv = [a*a‚Ä≤ - 1, a‚Ä≤*a - 1, b^2 - 1]
    rel = [a^9-1, (a * b)^4-1, (a^2 * b)^3-1]

    relations = Vector{elem_type(A)}(vcat(inv, rel))

    dimension = dimension_qa(A, relations)

    matrices = matrices_qa(SparseMatrixCSC, A, relations)

    # verify the relations are satisfied for low dimensions
    #verify(relations, matrices)

    # test dimension, i.e. order of group
    @test dimension == 2448
end

@testset "PSL‚ÇÉ(4)" begin
    A, (a, b, a‚Ä≤, b‚Ä≤) = free_associative_algebra(ùîΩ‚ÇÇ, ["a", "b", "a'", "b'"])
    inv = [a*a‚Ä≤ - 1, b*b‚Ä≤ - 1, a‚Ä≤*a - 1, b‚Ä≤*b - 1]
    rel = [a^5-1, b^3 - 1, (a * b)^4 - 1, (a‚Ä≤ * b * a‚Ä≤ * b‚Ä≤ * a * b)^3 - 1, (b * a^2 * b * a‚Ä≤^2 * b‚Ä≤ * a‚Ä≤^2 * b‚Ä≤ * a^2 * b * a * b‚Ä≤ * a‚Ä≤) - 1]

    relations = Vector{elem_type(A)}(vcat(inv, rel))

    dimension = dimension_qa(A, relations)

    matrices = matrices_qa(SparseMatrixCSC, A, relations)

    # verify the relations are satisfied for low dimensions
    #verify(relations, matrices)

    # test dimension, i.e. order of group
    @test dimension == 20160
end

@testset "M‚ÇÅ‚ÇÅ‚ÅΩ¬π‚Åæ" begin
    A, (a, b, c, a‚Ä≤, b‚Ä≤, c‚Ä≤) = free_associative_algebra(ùîΩ‚ÇÇ, ["a", "b", "c", "a'", "b'", "c'"])
    inv = [a*a‚Ä≤ - 1, b*b‚Ä≤ - 1, c*c‚Ä≤ - 1, a‚Ä≤*a - 1, b‚Ä≤*b - 1, c‚Ä≤*c - 1]
    rel = [a^11 - 1, b^5 - 1, c^4 - 1, (a^4 * c^2)^3 - 1, (b * c^2)^2 - 1, (a * b * c)^3 - 1, b‚Ä≤ * a * b * a‚Ä≤^4 - 1, c‚Ä≤ * b * c * b‚Ä≤^2 - 1]

    relations = Vector{elem_type(A)}(vcat(inv, rel))

    dimension = dimension_qa(A, relations)

    matrices = matrices_qa(SparseMatrixCSC, A, relations)

    # verify the relations are satisfied for low dimensions
    #verify(relations, matrices)

    # test dimension, i.e. order of group
    @test dimension == 7920
end

@testset "M‚ÇÅ‚ÇÅ‚ÅΩ¬≤‚Åæ" begin
    A, (a, b, c, a‚Ä≤, b‚Ä≤, c‚Ä≤) = free_associative_algebra(ùîΩ‚ÇÇ, ["a", "b", "c", "a'", "b'", "c'"])
    inv = [a*a‚Ä≤ - 1, b*b‚Ä≤ - 1, c*c‚Ä≤ - 1, a‚Ä≤*a - 1, b‚Ä≤*b - 1, c‚Ä≤*c - 1]
    rel = [a^11 - 1, b^5 - 1, c^4 - 1, (a * c)^3 - 1, c‚Ä≤ * b * c * b‚Ä≤^2 - 1, b‚Ä≤ * a * b * a‚Ä≤^4 - 1]

    relations = Vector{elem_type(A)}(vcat(inv, rel))

    dimension = dimension_qa(A, relations)

    matrices = matrices_qa(SparseMatrixCSC, A, relations)

    # verify the relations are satisfied for low dimensions
    #verify(ùîΩ‚ÇÇ, inv, rel, dimension, matrices)

    # test dimension, i.e. order of group
    @test dimension == 7920
end

# this test takes quite long to complete
# @testset "Neu" begin
#     A, (a, b, c, a‚Ä≤, b‚Ä≤, c‚Ä≤) = free_associative_algebra(ùîΩ‚ÇÇ, ["a", "b", "c", "a'", "b'", "c'"])
#     inv = [a*a‚Ä≤ - 1, b*b‚Ä≤ - 1, c*c‚Ä≤ - 1, a‚Ä≤*a - 1, b‚Ä≤*b - 1, c‚Ä≤*c - 1]
#     rel = [ a^3- 1, b^3 - 1, c^3 - 1, (a*b)^5 - 1, (a‚Ä≤*b)^5 - 1, (a*c)^4 - 1, (a*c‚Ä≤)^4 - 1, a*b‚Ä≤*a*b*c‚Ä≤*a*c*a*c‚Ä≤ - 1, (b*c)^3 - 1, (b‚Ä≤*c)^4 - 1]

#     relations = Vector{elem_type(A)}(vcat(inv, rel))

#     dimension = dimension_qa(A, relations)

#     matrices = matrices_qa(SparseMatrixCSC, A, relations)

#     # verify the relations are satisfied for low dimensions
#     verify(ùîΩ‚ÇÇ, inv, rel, dimension, matrices)

#     # test dimension, i.e. order of group
#     @test dimension == 40320
# end

@testset "Weyl B‚ÇÜ" begin
    A, (a, b, c, d, e, f) = free_associative_algebra(ùîΩ‚ÇÇ, ["a", "b", "c", "d", "e", "f"])
    inv = [a^2 - 1, b^2 - 1, c^2 - 1, d^2 - 1, e^2 - 1, f^2 - 1]
    rel = [(a * b)^3 - 1, (a * c)^2 - 1, (a * d)^2 - 1, (a * e)^2 - 1, (a * f)^2 - 1, (b * c)^3 - 1, (b * d)^2 - 1, (b * e)^2 - 1, (b * f)^2 - 1, (c * d)^3 - 1, (c * e)^2 - 1, (c * f)^2 - 1, (d * e)^3 - 1, (d * f)^2 - 1, (e * f)^4 - 1]

    relations = Vector{elem_type(A)}(vcat(inv, rel))

    dimension = dimension_qa(A, relations)

    matrices = matrices_qa(SparseMatrixCSC, A, relations)

    # verify the relations are satisfied for low dimensions
    #verify(ùîΩ‚ÇÇ, inv, rel, dimension, matrices)

    # test dimension, i.e. order of group
    @test dimension == 46080
end



### three polynomial presentations of the form ‚ü®s, t, u | stu - 1, p‚ÇÅ(s), p‚ÇÇ(t), p‚ÇÉ(u)‚ü© for polynomials p‚ÇÅ, p‚ÇÇ and p‚ÇÉ from  
# S.A. Linton, Constructing matrix representations of finitely presented groups,
# Journal of Symbolic Computation, Volume 12, Issues 4‚Äì5, 1991,Pages 427-438, ISSN 0747-7171,
# https://doi.org/10.1016/S0747-7171(08)80095-8. (https://www.sciencedirect.com/science/article/pii/S0747717108800958)
@testset "three polynomial presentations" begin
    @testset "examples over GF(2)" begin
        ùîΩ‚ÇÇ = GF(2)
        A, (s, t, u, s‚Åª¬π, t‚Åª¬π, u‚Åª¬π) = free_associative_algebra(ùîΩ‚ÇÇ, ["s", "t", "u", "s‚Åª¬π", "t‚Åª¬π", "u‚Åª¬π"])
        inv = [s * s‚Åª¬π - 1, s‚Åª¬π * s - 1, t * t‚Åª¬π - 1, t‚Åª¬π * t - 1, u * u‚Åª¬π - 1, u‚Åª¬π * u - 1]

        @testset "p‚ÇÅ = x¬≤ + 1, p‚ÇÇ = x¬≤ + x + 1, p‚ÇÉ = x‚Å∑ + 1" begin
            rel = [s * t * u + 1, s^2 + 1, t^2 + t + 1, u^7 + 1]

            relations = vcat(inv, rel)

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(Matrix, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension
            @test dimension == 12
        end

        @testset "p‚ÇÅ = x¬≤ + 1, p‚ÇÇ = x¬≤ + x + 1, p‚ÇÉ = x‚Åπ + 1" begin
            rel = [s * t * u + 1, s^2 + 1, t^2 + t + 1, u^9 + 1]

            relations = vcat(inv, rel)

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(Matrix, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension
            @test dimension == 16
        end

        @testset "p‚ÇÅ = x¬≤ + 1, p‚ÇÇ = x¬≤ + x + 1, p‚ÇÉ = x¬π¬π + 1" begin
            rel = [s * t * u + 1, s^2 + 1, t^2 + t + 1, u^11 + 1]

            relations = vcat(inv, rel)

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(Matrix, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension
            @test dimension == 20
        end

        @testset "p‚ÇÅ = x¬≤ + 1, p‚ÇÇ = x¬≤ + x + 1, p‚ÇÉ = x¬π¬≥ + 1" begin
            rel = [s * t * u + 1, s^2 + 1, t^2 + t + 1, u^13 + 1]

            relations = vcat(inv, rel)

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(Matrix, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension
            @test dimension == 24
        end

        @testset "p‚ÇÅ = x¬≤ + 1, p‚ÇÇ = x¬≤ + x + 1, p‚ÇÉ = x¬π‚Å∑ + 1" begin
            rel = [s * t * u + 1, s^2 + 1, t^2 + t + 1, u^17 + 1]

            relations = vcat(inv, rel)

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(Matrix, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension
            @test dimension == 32
        end

        @testset "p‚ÇÅ = x¬≤ + 1, p‚ÇÇ = x¬≥ + 1, p‚ÇÉ = x¬≥ + x + 1" begin
            rel = [s * t * u + 1, s^2 + 1, t^3 + 1, u^3 + u + 1]

            relations = vcat(inv, rel)

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(Matrix, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension
            @test dimension == 9
        end

        @testset "p‚ÇÅ = x¬≤ + 1, p‚ÇÇ = x¬≥ + 1, p‚ÇÉ = x¬≥ + x + 1" begin
            rel = [s * t * u + 1, s^2 + 1, t^3 + 1, u^3 + u + 1]

            relations = vcat(inv, rel)

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(Matrix, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension
            @test dimension == 9
        end

        @testset "p‚ÇÅ = x¬≤ + 1, p‚ÇÇ = x¬≥ + 1, p‚ÇÉ = x‚Åµ + x¬≤ + 1" begin
            rel = [s * t * u + 1, s^2 + 1, t^3 + 1, u^5 + u^2 + 1]

            relations = vcat(inv, rel)

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(Matrix, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension
            @test dimension == 25
        end
    end

    @testset "examples over GF(5)" begin
        ùîΩ‚ÇÖ = GF(5)
        A, (s, t, u, s‚Åª¬π, t‚Åª¬π, u‚Åª¬π) = free_associative_algebra(ùîΩ‚ÇÖ, ["s", "t", "u", "s‚Åª¬π", "t‚Åª¬π", "u‚Åª¬π"])
        inv = [s * s‚Åª¬π - 1, s‚Åª¬π * s - 1, t * t‚Åª¬π - 1, t‚Åª¬π * t - 1, u * u‚Åª¬π - 1, u‚Åª¬π * u - 1]

        @testset "p‚ÇÅ = x¬≤ - 1, p‚ÇÇ = x¬≤ + x + 1, p‚ÇÉ = x‚Å∏ - 1" begin
            rel = [s * t * u - 1, s^2 - 1, t^2 + t + 1, u^8 - 1]

            relations = vcat(inv, rel)

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(Matrix, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension
            @test dimension == 12
        end

        @testset "p‚ÇÅ = x¬≤ - 1, p‚ÇÇ = x¬≤ + x + 1, p‚ÇÉ = x¬π‚Å¥ - 1" begin
            rel = [s * t * u - 1, s^2 - 1, t^2 + t + 1, u^14 - 1]

            relations = vcat(inv, rel)

            dimension = dimension_qa(A, relations)

            matrices = matrices_qa(Matrix, A, relations)

            # verify the relations are satisfied for low dimensions
            verify(relations, matrices)

            # test dimension
            @test dimension == 28
        end
    end

    M = 10
    @testset "families over GF(2) for m in 1:$M" begin
        ùîΩ‚ÇÇ = GF(2)
        A, (s, t, u, s‚Åª¬π, t‚Åª¬π, u‚Åª¬π) = free_associative_algebra(ùîΩ‚ÇÇ, ["s", "t", "u", "s‚Åª¬π", "t‚Åª¬π", "u‚Åª¬π"])
        inv = [s * s‚Åª¬π - 1, s‚Åª¬π * s - 1, t * t‚Åª¬π - 1, t‚Åª¬π * t - 1, u * u‚Åª¬π - 1, u‚Åª¬π * u - 1]

        @testset "p‚ÇÅ = x¬≤ - 1, p‚ÇÇ = x¬≤ + x + 1, p‚ÇÉ = x‚Åø - 1" begin
            @testset "n = 2m" begin
                for n in 1:M
                    m = 2 * n
                    @testset "n = $m" begin
                        rel = [s * t * u + 1, s^2 + 1, t^2 + t + 1, u^m + 1]

                        relations = vcat(inv, rel)

                        dimension = dimension_qa(A, relations)
            
                        matrices = matrices_qa(Matrix, A, relations)
            
                        # verify the relations are satisfied for low dimensions
                        verify(relations, matrices)

                        # test dimension
                        @test dimension == 4 * n
                    end
                end
            end
            @testset "n = 2m + 1" begin
                for n in 1:M
                    m = 2 * n + 1
                    @testset "n = $m" begin
                        rel = [s * t * u + 1, s^2 + 1, t^2 + t + 1, u^m + 1]

                        relations = vcat(inv, rel)

                        dimension = dimension_qa(A, relations)
            
                        matrices = matrices_qa(Matrix, A, relations)
            
                        # verify the relations are satisfied for low dimensions
                        verify(relations, matrices)

                        # test dimension
                        @test dimension == 4 * n
                    end
                end
            end
        end
    end

    @testset "families over GF(5) for m in 1:$M" begin
        ùîΩ‚ÇÖ = GF(5)
        A, (s, t, u, s‚Åª¬π, t‚Åª¬π, u‚Åª¬π) = free_associative_algebra(ùîΩ‚ÇÖ, ["s", "t", "u", "s‚Åª¬π", "t‚Åª¬π", "u‚Åª¬π"])
        inv = [s * s‚Åª¬π - 1, s‚Åª¬π * s - 1, t * t‚Åª¬π - 1, t‚Åª¬π * t - 1, u * u‚Åª¬π - 1, u‚Åª¬π * u - 1]
        @testset "p‚ÇÅ = x¬≤ - 1, p‚ÇÇ = x¬≤ + x + 1, p‚ÇÉ = x‚Åø - 1" begin
            @testset "n = 2m + 1" begin
                for n in 1:M
                    m = 2 * n + 1
                    @testset "n = $m" begin
                        rel = [s * t * u - 1, s^2 - 1, t^2 + t + 1, u^m - 1]

                        relations = vcat(inv, rel)

                        dimension = dimension_qa(A, relations)
            
                        matrices = matrices_qa(Matrix, A, relations)
            
                        # verify the relations are satisfied for low dimensions
                        verify(relations, matrices)

                        # test dimension
                        @test dimension == 0 broken = (n ‚àà [1, 4, 7, 10])  # for these values the dimension is 2, even with the authors implementation
                    end
                end
            end
            @testset "n = 4m + 2" begin
                for n in 1:M
                    m = 4 * n + 2
                    @testset "n = $m" begin
                        rel = [s * t * u - 1, s^2 - 1, t^2 + t + 1, u^m - 1]

                        relations = vcat(inv, rel)

                        dimension = dimension_qa(A, relations)
            
                        matrices = matrices_qa(Matrix, A, relations)
            
                        # verify the relations are satisfied for low dimensions
                        verify(relations, matrices)

                        # test dimension
                        @test dimension == 8 * n + 4
                    end
                end
            end
            @testset "n = 4m" begin
                for n in 1:M
                    m = 4 * n
                    @testset "n = $m" begin
                        rel = [s * t * u - 1, s^2 - 1, t^2 + t + 1, u^m - 1]

                        relations = vcat(inv, rel)

                        dimension = dimension_qa(A, relations)
            
                        matrices = matrices_qa(Matrix, A, relations)
            
                        # verify the relations are satisfied for low dimensions
                        verify(relations, matrices)

                        # test dimension
                        @test dimension == 8 * n - 4
                    end
                end
            end
        end
    end
end
